// ===== SCRIPT DE PRUEBA PARA VISIBILIDAD DEL FORMULARIO =====

console.log('üß™ === PRUEBA: Visibilidad del Formulario ===');

// Funci√≥n para verificar el estado actual del formulario
function checkFormVisibility() {
    console.log('\nüìä Estado actual del formulario:');
    
    const formSection = document.getElementById('formSection');
    const showFormBtn = document.getElementById('showFormBtn');
    const hideFormBtn = document.getElementById('hideFormBtn');
    
    if (formSection) {
        const isVisible = formSection.classList.contains('show');
        console.log('   - Formulario visible:', isVisible ? '‚úÖ S√≠' : '‚ùå No');
        console.log('   - Clases del formulario:', formSection.className);
    } else {
        console.log('   - Formulario no encontrado: ‚ùå');
    }
    
    if (showFormBtn) {
        const isShowBtnVisible = showFormBtn.style.display !== 'none';
        console.log('   - Bot√≥n "Agregar Cliente" visible:', isShowBtnVisible ? '‚úÖ S√≠' : '‚ùå No');
    } else {
        console.log('   - Bot√≥n "Agregar Cliente" no encontrado: ‚ùå');
    }
    
    if (hideFormBtn) {
        const isHideBtnVisible = hideFormBtn.style.display !== 'none';
        console.log('   - Bot√≥n "Ocultar Formulario" visible:', isHideBtnVisible ? '‚úÖ S√≠' : '‚ùå No');
    } else {
        console.log('   - Bot√≥n "Ocultar Formulario" no encontrado: ‚ùå');
    }
    
    console.log('   - Modo de edici√≥n:', isEditing ? '‚úèÔ∏è Editando' : '‚ûï Agregando');
    console.log('   - Cliente actual:', currentClient ? currentClient.Nombre : 'Ninguno');
}

// Funci√≥n para probar mostrar el formulario
function testShowForm() {
    console.log('\nüîç Probando mostrar formulario...');
    
    if (typeof showForm === 'function') {
        showForm();
        console.log('‚úÖ Funci√≥n showForm() ejecutada');
        
        // Verificar despu√©s de un breve delay
        setTimeout(() => {
            checkFormVisibility();
        }, 500);
    } else {
        console.log('‚ùå Funci√≥n showForm() no est√° disponible');
    }
}

// Funci√≥n para probar ocultar el formulario
function testHideForm() {
    console.log('\nüëÅÔ∏è Probando ocultar formulario...');
    
    if (typeof hideForm === 'function') {
        hideForm();
        console.log('‚úÖ Funci√≥n hideForm() ejecutada');
        
        // Verificar despu√©s de un breve delay
        setTimeout(() => {
            checkFormVisibility();
        }, 500);
    } else {
        console.log('‚ùå Funci√≥n hideForm() no est√° disponible');
    }
}

// Funci√≥n para probar el modo de edici√≥n
function testEditMode() {
    console.log('\n‚úèÔ∏è Probando modo de edici√≥n...');
    
    if (!clients || clients.length === 0) {
        console.log('‚ùå No hay clientes para probar');
        return;
    }
    
    // Simular edici√≥n del primer cliente
    const testClient = clients[0];
    console.log(`üìù Editando cliente: ${testClient.Nombre}`);
    
    if (typeof editClient === 'function') {
        editClient(testClient.ID);
        console.log('‚úÖ Funci√≥n editClient() ejecutada');
        
        // Verificar despu√©s de un breve delay
        setTimeout(() => {
            checkFormVisibility();
        }, 500);
    } else {
        console.log('‚ùå Funci√≥n editClient() no est√° disponible');
    }
}

// Funci√≥n para probar cancelar edici√≥n
function testCancelEdit() {
    console.log('\n‚ùå Probando cancelar edici√≥n...');
    
    if (typeof cancelEdit === 'function') {
        cancelEdit();
        console.log('‚úÖ Funci√≥n cancelEdit() ejecutada');
        
        // Verificar despu√©s de un breve delay
        setTimeout(() => {
            checkFormVisibility();
        }, 500);
    } else {
        console.log('‚ùå Funci√≥n cancelEdit() no est√° disponible');
    }
}

// Funci√≥n para probar el flujo completo
function testCompleteFlow() {
    console.log('\nüîÑ === PRUEBA DE FLUJO COMPLETO ===');
    
    console.log('\n1Ô∏è‚É£ Estado inicial:');
    checkFormVisibility();
    
    console.log('\n2Ô∏è‚É£ Mostrando formulario para agregar:');
    testShowForm();
    
    setTimeout(() => {
        console.log('\n3Ô∏è‚É£ Ocultando formulario:');
        testHideForm();
        
        setTimeout(() => {
            console.log('\n4Ô∏è‚É£ Probando modo de edici√≥n:');
            testEditMode();
            
            setTimeout(() => {
                console.log('\n5Ô∏è‚É£ Cancelando edici√≥n:');
                testCancelEdit();
                
                console.log('\n‚úÖ Flujo completo probado');
            }, 1000);
        }, 1000);
    }, 1000);
}

// Funci√≥n espec√≠fica para probar en clientes.html
function testInClientesPage() {
    console.log('\nüéØ === PRUEBA ESPEC√çFICA PARA CLIENTES.HTML ===');
    
    // Verificar que estamos en la p√°gina correcta
    if (!document.getElementById('clientForm')) {
        console.log('‚ùå No est√°s en la p√°gina clientes.html');
        console.log('üí° Ve a clientes.html y ejecuta: testInClientesPage()');
        return;
    }
    
    console.log('‚úÖ Est√°s en clientes.html');
    
    // Verificar elementos del DOM
    console.log('\nüîß Elementos del DOM:');
    console.log('   - Formulario:', !!document.getElementById('formSection'));
    console.log('   - Bot√≥n "Agregar Cliente":', !!document.getElementById('showFormBtn'));
    console.log('   - Bot√≥n "Ocultar Formulario":', !!document.getElementById('hideFormBtn'));
    
    // Verificar funciones disponibles
    console.log('\nüîß Funciones disponibles:');
    console.log('   - showForm:', typeof showForm === 'function' ? '‚úÖ' : '‚ùå');
    console.log('   - hideForm:', typeof hideForm === 'function' ? '‚úÖ' : '‚ùå');
    console.log('   - editClient:', typeof editClient === 'function' ? '‚úÖ' : '‚ùå');
    console.log('   - cancelEdit:', typeof cancelEdit === 'function' ? '‚úÖ' : '‚ùå');
    
    // Verificar estado inicial
    console.log('\nüìä Estado inicial:');
    checkFormVisibility();
    
    console.log('\nüß™ Para probar manualmente:');
    console.log('1. Haz clic en "‚ûï Agregar Nuevo Cliente"');
    console.log('2. El formulario deber√≠a aparecer con animaci√≥n');
    console.log('3. Haz clic en "üëÅÔ∏è Ocultar Formulario"');
    console.log('4. El formulario deber√≠a desaparecer');
    console.log('5. Haz clic en "‚úèÔ∏è Editar" en cualquier tarjeta');
    console.log('6. El formulario deber√≠a aparecer en modo edici√≥n');
    console.log('7. Haz clic en "‚ùå Cancelar Edici√≥n"');
    console.log('8. El formulario deber√≠a desaparecer');
    
    console.log('\nüí° Comandos para probar autom√°ticamente:');
    console.log('- testCompleteFlow() - Prueba todo el flujo');
    console.log('- testShowForm() - Solo mostrar formulario');
    console.log('- testHideForm() - Solo ocultar formulario');
    console.log('- testEditMode() - Solo probar modo edici√≥n');
    console.log('- testCancelEdit() - Solo cancelar edici√≥n');
}

// Ejecutar verificaci√≥n inicial
console.log('üöÄ Iniciando verificaci√≥n de visibilidad del formulario...');
checkFormVisibility();

console.log('\nüìù Comportamiento esperado:');
console.log('- El formulario est√° OCULTO por defecto');
console.log('- El bot√≥n "‚ûï Agregar Nuevo Cliente" est√° visible');
console.log('- Al hacer clic en "‚ûï Agregar Nuevo Cliente": formulario aparece');
console.log('- Al hacer clic en "‚úèÔ∏è Editar": formulario aparece en modo edici√≥n');
console.log('- Al hacer clic en "üëÅÔ∏è Ocultar Formulario": formulario desaparece');
console.log('- Al hacer clic en "‚ùå Cancelar Edici√≥n": formulario desaparece');
console.log('- Al guardar exitosamente: formulario desaparece autom√°ticamente');

console.log('\nüí° Para probar con datos reales:');
console.log('- Ejecuta este script en la p√°gina clientes.html');
console.log('- Para prueba espec√≠fica: testInClientesPage()');
console.log('- Para prueba autom√°tica completa: testCompleteFlow()');
